// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rent.Data;

namespace Rent.Data.Migrations
{
    [DbContext(typeof(RentDbContext))]
    partial class RentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Rent.Data.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Rent.Data.Entity.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Canceled");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("ExpertiseId");

                    b.Property<int>("ExpertiseLevelId");

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LanguageId");

                    b.Property<int?>("LanguageLevelId");

                    b.Property<string>("Name");

                    b.Property<string>("PeopleCount");

                    b.Property<string>("PeopleNames");

                    b.Property<bool>("Private");

                    b.Property<int>("RentalId");

                    b.Property<int>("RentalPlaceId");

                    b.Property<DateTime>("To");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("ExpertiseLevelId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.HasIndex("RentalId");

                    b.HasIndex("RentalPlaceId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Rent.Data.Entity.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("Rent.Data.Entity.ExpertiseLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("ExpertiseLevels");
                });

            modelBuilder.Entity("Rent.Data.Entity.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MobilPhone");

                    b.Property<int>("Order");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.Property<string>("WorkPhone");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("From");

                    b.Property<int>("InstructorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("To");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorAvailabilities");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorCourse", b =>
                {
                    b.Property<int>("InstructorId");

                    b.Property<int>("CourseId");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("InstructorCourses");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorExpertise", b =>
                {
                    b.Property<int>("InstructorId");

                    b.Property<int>("ExpertiseId");

                    b.Property<int>("ExpertiseLevelId");

                    b.HasKey("InstructorId", "ExpertiseId");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("ExpertiseLevelId");

                    b.ToTable("InstructorExpertises");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorLanguage", b =>
                {
                    b.Property<int>("InstructorId");

                    b.Property<int>("LanguageId");

                    b.Property<int>("LanguageLevelId");

                    b.HasKey("InstructorId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("InstructorLanguages");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("InstructorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorPayments");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorRental", b =>
                {
                    b.Property<int>("InstructorId");

                    b.Property<int>("RentalId");

                    b.HasKey("InstructorId", "RentalId");

                    b.HasIndex("RentalId");

                    b.ToTable("InstructorRentals");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorTicket", b =>
                {
                    b.Property<int>("InstructorId");

                    b.Property<int>("TicketId");

                    b.Property<DateTime>("From");

                    b.Property<DateTime>("To");

                    b.HasKey("InstructorId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("InstructorTickets");
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorWageRate", b =>
                {
                    b.Property<int>("InstructorId");

                    b.Property<int>("WageRateId");

                    b.Property<bool>("Default");

                    b.HasKey("InstructorId", "WageRateId");

                    b.HasIndex("WageRateId");

                    b.ToTable("InstructorWageRates");
                });

            modelBuilder.Entity("Rent.Data.Entity.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Lang");

                    b.Property<bool>("Localized");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Rent.Data.Entity.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");
                });

            modelBuilder.Entity("Rent.Data.Entity.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessId");

                    b.Property<string>("City");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<string>("Street");

                    b.Property<string>("TaxId");

                    b.Property<string>("Telephone");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Rent.Data.Entity.RentalPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("RentalId");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.ToTable("RentalPlaces");
                });

            modelBuilder.Entity("Rent.Data.Entity.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RentalId");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Rent.Data.Entity.WageRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Percental");

                    b.Property<decimal>("Rate");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserDeleted");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("WageRates");
                });

            modelBuilder.Entity("Rent.Data.Entity.Course", b =>
                {
                    b.HasOne("Rent.Data.Entity.Expertise", "Expertise")
                        .WithMany("Courses")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rent.Data.Entity.ExpertiseLevel", "ExpertiseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("ExpertiseLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rent.Data.Entity.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rent.Data.Entity.LanguageLevel", "LanguageLevel")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rent.Data.Entity.Rental", "Rental")
                        .WithMany("Courses")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Rent.Data.Entity.RentalPlace", "RentalPlace")
                        .WithMany("Courses")
                        .HasForeignKey("RentalPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorAvailability", b =>
                {
                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("Availabilities")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorCourse", b =>
                {
                    b.HasOne("Rent.Data.Entity.Course", "Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorExpertise", b =>
                {
                    b.HasOne("Rent.Data.Entity.Expertise", "Expertise")
                        .WithMany("Instructors")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.ExpertiseLevel", "ExpertiseLevel")
                        .WithMany()
                        .HasForeignKey("ExpertiseLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("Expertises")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorLanguage", b =>
                {
                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("Languages")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.Language", "Language")
                        .WithMany("Instructors")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorPayment", b =>
                {
                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("InstructorPayments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorRental", b =>
                {
                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("Rentals")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.Rental", "Rental")
                        .WithMany("Instructors")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorTicket", b =>
                {
                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("Tickets")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.Ticket", "Ticket")
                        .WithMany("Instructors")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.InstructorWageRate", b =>
                {
                    b.HasOne("Rent.Data.Entity.Instructor", "Instructor")
                        .WithMany("WageRates")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rent.Data.Entity.WageRate", "WageRate")
                        .WithMany("Instructors")
                        .HasForeignKey("WageRateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.Rental", b =>
                {
                    b.HasOne("Rent.Data.Entity.Company", "Company")
                        .WithMany("Rentals")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.RentalPlace", b =>
                {
                    b.HasOne("Rent.Data.Entity.Rental", "Rental")
                        .WithMany("Places")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rent.Data.Entity.Ticket", b =>
                {
                    b.HasOne("Rent.Data.Entity.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
